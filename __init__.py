#The main file, __init__.py
#This file runs the whole game by calling WritingApp, a modal app.

from cmu_112_graphics import *

class WritingApp(ModalApp):
    def appStarted(self):
        self.addMode(LibraryMode(name="library"))
        self.addMode(EditorMode(name="editor"))
        self.setActiveMode("library")
    
    def readFile(self):
        """Returns the contents of the file at the path. Code taken from https://www.diderot.one/course/34/chapters/2604/"""
        with open(self.path, "rt") as f:
            return f.read()
    
    def getDocs(self): #reads files in the library file directory and converts to Document.
        #set title
        #set content and tags
        #if marked with pages, page words = the string after pages
        #if simply a string, automatically set the pages with defaults
        #tags represented by {highlighted words here: tag1, tag2, tag3}
        #add document to list of documents in library.
        rawContents = self.readFile()
        pass

class EditorMode(Mode):
    def appStarted(self):
        pass

    #closeEditor

    ###############################################
    #Content management
    ###############################################

    #getCurrentPath (gets path of the edited document)

    #saveFile
        #(writeFile)
    
    #keyPressed(shift, numbers, symbols, letters, enter/return, backspace, tab)
        #need to check for line overflow

    #overflow (need to keep track of page width)

    ###############################################
    #Page management
    ###############################################

    #addPage(self)

    #delPage(self)

    #flipForward (go to next page)

    #flipBackward (go back a page)

    #jumpTo(self, page)

    #getCurrentPages

    ###############################################
    #Tag Creation
    ###############################################

    #Highlight text (mouse pressed and mouse dragged)

    #tagText

    #clearTag

    ###############################################
    #Content searching stuff
    ###############################################

    #searchDocument
        #get user input
        #look for matching string
        #jump to first instance

    #nextMatch

    #lastMatch

    ###############################################
    #Tag searching stuff
    ###############################################

    #findTag
        #get user input (dropdown menu click)
        #look through tagged content in document
        #if tag matches, jump to first instance
    
    #nextTag

    #lastTag



class LibraryMode(Mode):
    def appStarted(self): 
        self.menuHeight = self.height//12
        self.menuBotHeight = self.height//14
        self.libraryWidth = 300
        self.currTags = []
        self.rows = 4
        self.cols = 4
        self.cellWidth = 
        self.cellHeight =
    
    #loadLibrary
        #render every file in the library list generated by getDoc

    #selectDoc
        #If selected document clicked again, open editor for that document.
        #if another doc is clicked, deselect current and select newly clicked.

        #will need a mousepressed

    #newDoc
        #opens panel where title and timestamp can be entered

    #newDocCancel (onclick method)
        #closes the panel opened by newDoc

    #newDocDone (onclick method)
        #creates a new file in the directory with the given name and timestamp from newDoc. starts blank, with no tags
        #opens the document in the editor

    #delDoc
        #deletes the file located at the path of the currently selected document

    ########################################
    #Grid layout
    ########################################
    
    #def drawGrid(self, canvas):
        #col = index % cells in row
        #row = index // cells in row
        #loop through rows
            #loop through cols
                #draw document at center of cell


    #####################################################################################
    #TYPING CAN BE ITS OWN SEPARATE FUNCTION SINCE IT WILL BE REUSED IN MULTIPLE PLACES:
    #TEXT EDITOR, RENAME DOCUMENT, EDIT TAGS, SEARCH BAR INPUTS
    #####################################################################################

    #searchLibrary (will probably use a similar structure to searchDoc in the editor mode)

    #####################################
    #Editing functions
    #####################################

    #renameDoc
        #enables panel which is drawn over the rest of the screen
        #takes in text input
        #if renameDone onclick fired while panel is open, writes new title to file
    
    #renameDone (onclick method for when done button is clicked)

    #editDocTag
        #enables panel
        #takes text input
        #if docTagDone onclick fired, writes new tags to file.

    #docTagDone (onclick method for when done button is clicked)

    ############################################
    #Sort
    ############################################
    #from operator import itemgetter, attrgetter

    #sort keys: title, time, tag
        
    #def sortTime (sorts by time)
        #sorted(documents, key=attrgetter('timestamp', 'title'))
    
    #sortTitle (sorts alphabetical order A-Z)
        #sorted(documents, key=attrgetter('title', 'timestamp'))

    
    ############################################
    #Filter
    ############################################

    #filterDoc
        #takes in a list of currently selected filter tags
        #doesn't render ones that don't have that tag

    #addFilterTag

    #removeFilterTag

    def redrawAll(self, canvas):
        canvas.create_rectangle(0, 0, self.width, self.height, fill= "light grey", width=0)
        canvas.create_rectangle(0, 0, self.width, self.menuHeight, fill= "white", width=0)
        canvas.create_rectangle(0, self.height - self.menuBotHeight, self.width, self.height, fill= "white", width=0)
        canvas.create_rectangle(self.width//2 - self.libraryWidth, self.menuHeight, self.width//2 + self.libraryWidth,
            self.height - self.menuBotHeight, outline="grey")
        

def main():
    WritingApp(width=700, height=800)
    testAll()


if __name__ == "__main__":
    main()

